(defun readFile (filepath outputpath attributes domains classifications)
   (with-open-file (stream filepath)  
    (with-open-file (stream1 outputpath :direction :output)
	 (setf s1 (concatenate 'string "" "(setf *FEATURE-NAMES*"))
	 (setf s2 (concatenate 'string "" "(setf *DOMAINS*"))
	 (setf s3 (concatenate 'string "" "(setf *CATEGORIES*"))
	 (setf s4 (concatenate 'string "" "(setf *raw-examples*"))
	 (format stream1 "~a~%" s1)
	 (format stream1 "'~a)~%~%~%" attributes)
	 (format stream1 "~a~%" s2)
	 (format stream1 "'~a)~%~%~%" domains)
	 (format stream1 "~a~%" s3)
	 (format stream1 "'~a)~%~%~%" classifications)
	 (format stream1 "~a '(~%" s4)
       (do
  	   ((line (read-line stream nil) (read-line stream nil)))	
	   ((null line) (close stream) (format stream1 "~a" "))") (close stream1))
	   (do
	 	((index 0 (+ index 1)) (outputline "") (classification "(") (currentpos (search "," line)) (prepos -1))
		((= currentpos -1) (setq outputline (concatenate 'string "(" (concatenate 'string (concatenate 'string classification (concatenate 'string  outputline (subseq line (+ 1 prepos))) "))")))) (format stream1 "~a~%" outputline))
	        (if (= index 0) (setq outputline (concatenate 'string outputline " #(")))
		(cond
			((= index 0) (cond
					 ((equal "" (subseq line (+ 1 prepos))) (setq classification "?"))
					 ((textinput (subseq line (+ 1 prepos))) (setq classification (concatenate 'string (string-upcase (subseq line (+ 2 prepos) (- currentpos 1))))))
					 (T (setq classification (concatenate 'string (string-upcase (subseq line (+ 1 prepos) currentpos)))))
					))
			(T (cond
				((equal "" (subseq line (+ 1 prepos) currentpos)) (setq outputline (concatenate 'string outputline "?")))
				((textinput (subseq line (+ 1 prepos) currentpos)) (setq outputline (concatenate 'string outputline (string-upcase (subseq line (+ 2 prepos) (- currentpos 1))))))
				(T (setq outputline (concatenate 'string outputline (string-upcase (subseq line (+ 1 prepos) currentpos)))))))
		)
		(setq prepos currentpos)
		(if (not (null (search "," line :start2 (+ currentpos 1)))) (setq currentpos (search "," line :start2 (+ currentpos 1))) (setq currentpos -1))
		(if (not (= index 0)) (setq outputline (concatenate 'string outputline " ")))
	   ) 
	)  
      )
   )
)


(defun textinput (text)	
	(if (equal (subseq text 0 1) "\"") T nil)	
)
